name: Update Chain Registry Versions

on:
  workflow_call:
    inputs:
      version_tag:
        required: true
        type: string
        description: "The version tag (e.g. v18.0.1)"
      cosmos_sdk_version:
        required: true
        type: string
        description: "Cosmos SDK version"
      go_version:
        required: true
        type: string
        description: "Go version"
      consensus_version:
        required: true
        type: string
        description: "CometBFT version"
      cosmwasm_version:
        required: true
        type: string
        description: "CosmWasm version"
      ibc_version:
        required: true
        type: string
        description: "IBC-Go version"
      height:
        required: false
        type: string
        description: "Upgrade height"
      proposal:
        required: false
        type: string
        description: "Proposal ID"
      checksum_darwin_amd64:
        required: true
        type: string
        description: "SHA256 checksum for darwin/amd64 binary"
      checksum_darwin_arm64:
        required: true
        type: string
        description: "SHA256 checksum for darwin/arm64 binary"
      checksum_linux_amd64:
        required: true
        type: string
        description: "SHA256 checksum for linux/amd64 binary"
      checksum_linux_arm64:
        required: true
        type: string
        description: "SHA256 checksum for linux/arm64 binary"

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Extract version name
        id: version_info
        run: |
          # Extract version name (e.g. v99 from v99.0.0)
          VERSION_NAME=$(echo ${{ inputs.version_tag }} | cut -d. -f1)
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT

      - name: TESTNET - Update file versions.json for testnet
        id: update_testnet_json
        run: |
          # Read the current file
          VERSIONS_FILE="public/chain-registry/testnets/xiontestnet2/versions.json"

          # Remove 'v' prefix for binary names
          VERSION_NO_V=$(echo ${{ inputs.version_tag }} | sed 's/^v//')

          # Create new version entry
          NEW_VERSION=$(cat << EOF
          {
            "name": "${{ steps.version_info.outputs.version_name }}",
            "tag": "${{ inputs.version_tag }}",
            "recommended_version": "${{ inputs.version_tag }}",
            "height": ${{ inputs.height }},
            "proposal": ${{ inputs.proposal }},
            "language": {
              "type": "go",
              "version": "${{ inputs.go_version }}"
            },
            "binaries": {
              "darwin/amd64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_darwin_amd64.tar.gz?checksum=sha256:${{ inputs.checksum_darwin_amd64 }}",
              "darwin/arm64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_darwin_arm64.tar.gz?checksum=sha256:${{ inputs.checksum_darwin_arm64 }}",
              "linux/amd64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_linux_amd64.tar.gz?checksum=sha256:${{ inputs.checksum_linux_amd64 }}",
              "linux/arm64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_linux_arm64.tar.gz?checksum=sha256:${{ inputs.checksum_linux_arm64 }}"
            },
            "sdk": {
              "type": "cosmos",
              "version": "${{ inputs.cosmos_sdk_version }}"
            },
            "consensus": {
              "type": "cometbft",
              "version": "${{ inputs.consensus_version }}"
            },
            "cosmwasm": {
              "version": "${{ inputs.cosmwasm_version }}",
              "enabled": true
            },
            "ibc": {
              "type": "go",
              "version": "${{ inputs.ibc_version }}"
            }
          }
          EOF
          )

          # Add new version to the versions array
          jq --argjson new "$NEW_VERSION" '.versions += [$new]' "$VERSIONS_FILE" > temp.json
          mv temp.json "$VERSIONS_FILE"

          cat $VERSIONS_FILE

      - name: MAINNET - Update file versions.json for mainnet
        id: update_mainnet_json
        run: |
          # Read the current file
          VERSIONS_FILE="public/chain-registry/xion/versions.json"

          # Remove 'v' prefix for binary names
          VERSION_NO_V=$(echo ${{ inputs.version_tag }} | sed 's/^v//')

          # Create new version entry
          NEW_VERSION=$(cat << EOF
          {
            "name": "${{ steps.version_info.outputs.version_name }}",
            "tag": "${{ inputs.version_tag }}",
            "recommended_version": "${{ inputs.version_tag }}",
            "height": ${{ inputs.height }},
            "proposal": ${{ inputs.proposal }},
            "language": {
              "type": "go",
              "version": "${{ inputs.go_version }}"
            },
            "binaries": {
              "darwin/amd64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_darwin_amd64.tar.gz?checksum=sha256:${{ inputs.checksum_darwin_amd64 }}",
              "darwin/arm64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_darwin_arm64.tar.gz?checksum=sha256:${{ inputs.checksum_darwin_arm64 }}",
              "linux/amd64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_linux_amd64.tar.gz?checksum=sha256:${{ inputs.checksum_linux_amd64 }}",
              "linux/arm64": "https://github.com/burnt-labs/xion/releases/download/${{ inputs.version_tag }}/xiond_${VERSION_NO_V}_linux_arm64.tar.gz?checksum=sha256:${{ inputs.checksum_linux_arm64 }}"
            },
            "sdk": {
              "type": "cosmos",
              "version": "${{ inputs.cosmos_sdk_version }}"
            },
            "consensus": {
              "type": "cometbft",
              "version": "${{ inputs.consensus_version }}"
            },
            "cosmwasm": {
              "version": "${{ inputs.cosmwasm_version }}",
              "enabled": true
            },
            "ibc": {
              "type": "go",
              "version": "${{ inputs.ibc_version }}"
            }
          }
          EOF
          )

          # Add new version to the versions array
          jq --argjson new "$NEW_VERSION" '.versions += [$new]' "$VERSIONS_FILE" > temp.json
          mv temp.json "$VERSIONS_FILE"

          cat $VERSIONS_FILE

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "feat: add ${{ inputs.version_tag }} to xiontestnet2 & xion versions.json"
          title: "feat: add ${{ inputs.version_tag }} to xiontestnet2 & xion chain registry"
          body: |
            Updates xiontestnet2 & xion versions.json with ${{ inputs.version_tag }} release information
            - Added new version entry
            - Updated compatible versions
            - Added binary links
            - Updated SDK and module versions
          branch: "feat/add-${{ inputs.version_tag }}-version"
          delete-branch: true
          base: "feat/DO-64-update-chain-registry-on-release" #TODO change to main
          reviewers: "2xburnt,wehappyfew"